import sharedCodeOwners as shared
import gitLabService as gitlab
import matterMostNotificationSender as mm
# import json
import sys
import os


def contains_at_least(amount, source, target):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ target —Ö–æ—Ç—è –±—ã —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ø—Ä—É–≤–µ—Ä–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã platform."""
    owners = list(map(lambda team: team['team'], filter(lambda team: team['name'] == '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ROnline', source)))
    if owners:
        count = sum(1 for item in target if item in owners[0])
        return count >= amount
    return False


def validate_approvers_for_diff(diff_paths, provided_approvers, codeowners_data, merge_author):
    codeowners_paths = codeowners_data['paths']
    codeowners_teams = codeowners_data['teams']

    responsible_teams, not_found_paths = shared.get_teams_owners_and_unowned_paths(diff_paths, codeowners_paths)

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ platform –¥–∞–ª–∞ –º–∏–Ω–∏–º—É–º 2 –∞–ø—Ä—É–≤–∞, –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.
    if contains_at_least(2, codeowners_teams, provided_approvers):
        return True

    team_owners = shared.get_members_of_teams(responsible_teams, codeowners_teams)
    all_approvers = set().union(*team_owners.values())

    print(team_owners)
    print(all_approvers)

    if merge_author in all_approvers:
        all_approvers.remove(merge_author)

    print(all_approvers)

    # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–±—â–µ–µ —á–∏—Å–ª–æ –∞–ø—Ä—É–≤–µ—Ä–æ–≤ —Ä–∞–≤–Ω–æ –∏–ª–∏ –±–æ–ª—å—à–µ 2.
    if not all_approvers:
        return len(provided_approvers) >= 2

    print(team_owners)

    for team in team_owners:
        team_owners[team] = [owner for owner in team_owners[team] if owner != merge_author]

    print(team_owners)

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–ø—Ä—É–≤–µ—Ä –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö.
    missing_approval = [
        team for team, owners in team_owners.items()
        if owners and not any(approver in owners for approver in provided_approvers)
    ]

    return missing_approval if missing_approval else True


def main(repo_path):
    gitlab_service = gitlab.GitLabService()
    notification_sender = mm.MMNotificationSender()
    source_branch_name = os.getenv("CI_MERGE_REQUEST_SOURCE_BRANCH_NAME")

    merge_request = gitlab_service.get_merge_requests_by_branch(source_branch_name)[0]
    merge_author = merge_request['author']['username']

    approval_users = gitlab_service.get_merge_request_approvals(merge_request['iid'])
    approval_usersnames = [entry['user']['username'] for entry in approval_users['approved_by']]

    diff_paths = gitlab_service.get_merge_request_changes(merge_request['iid'])
    job_name = os.getenv("CI_JOB_NAME")

    # –¥–ª—è draft –∏—Å–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤
    if merge_request['draft']:
        draft_message = ("**–†–µ–≤—å—é–≤–µ—Ä—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã**\n\n–î–ª—è Draft Merge request —Ä–µ–≤—å—é–≤–µ—Ä—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è. " +
                         f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏ Draft —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∂–æ–±—É '{job_name}'.")
        gitlab_service.create_comment(
                merge_request['iid'],
                draft_message
            )
        print(shared.color_text(draft_message, "red"))
        sys.exit(1)

    try:
        codeowners_data = gitlab_service.get_codeowners_conf(source_branch_name)
    except KeyError:
        print(shared.color_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "red"))
        exit(1)

    result = validate_approvers_for_diff(
        diff_paths,
        [username for username in approval_usersnames if username != merge_author],  # if username != merge_author
        codeowners_data,                                                             # –∏—Å–∫–ª—é—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–ø—Ä—É–≤–∞
        merge_author                                                                 # —Å–∞–º–æ–º—É —Å–µ–±–µ
    )

    if result is False:
        notification_sender.send_message(merge_author,
                                         "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∞–ø—Ä—É–≤–æ–≤.\n" +
                                         "–î–ª—è –≤–ª–∏—Ç–∏—è –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∞–ø—Ä—É–≤–∞")
        print(shared.color_text("üò≠ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∞–ø—Ä—É–≤–æ–≤.\n" +
                                "–î–ª—è –≤–ª–∏—Ç–∏—è –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∞–ø—Ä—É–≤–∞", "yellow"))
        sys.exit(1)

    elif result is not True:
        codeowners_teams = codeowners_data['teams']
        team_owners = shared.get_members_of_teams(result, codeowners_teams)
        formatted_teams = shared.format_teams_to_mm(team_owners)
        gitlab_service.create_thread(
            merge_request['iid'],
            f"–ù–µ –Ω–∞–π–¥–µ–Ω –∞–ø—Ä—É–≤ –æ—Ç –∫–æ–º–∞–Ω–¥ \n {formatted_teams}"
        )
        notification_sender.send_message(merge_author, f"–ù–µ –Ω–∞–π–¥–µ–Ω –∞–ø—Ä—É–≤ –æ—Ç –∫–æ–º–∞–Ω–¥ \n {formatted_teams}")
        print(shared.color_text(f"üò≠ –ù–µ –Ω–∞–π–¥–µ–Ω –∞–ø—Ä—É–≤ –æ—Ç –∫–æ–º–∞–Ω–¥ \n - {formatted_teams}", "yellow"))
        sys.exit(1)


if __name__ == "__main__":
    main(sys.argv[1])
